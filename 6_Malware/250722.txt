250722

Windows API : 시스템을 이용하게 하는 특정한 명령(혹은 함수)
> ex) printf, scanf etc..

CreateFileA
> "빈공간-inode-연속적-할당-해당 메모리 사용중임을 시스템에 알리고-...." 를 할 수 있게 해줌.
> Q. 함수의 반환값(ex. HANDLE)은 어떤 레지스터로 반환될까.
>> A. EAX(산술,논리 등의 연산 값을 반환)
> in,out : 함수에 주는 값이냐, 함수에서 반환하는 값이냐
> 함수명 ~A : input string type
> 파일을 "생성"하거나 "열기"하는 함수임.

> x32dgb에서 컴파일러 생성 코드를 확인하면 "<&Getversion>" 이 있음 < API임.

Socket API
> Windows 에서는 잘 사용되지 않음, 보통 HTTP 통신하기 때문에
> Unix계열(Linux 등)에서는 많이 사용됨, TCP/UDP 통신을 많이 하기 때문에

기타 API
> LoadLibrary : 악성코드에 많이 사용됨.
> GetProcAddress : L~과 함께 악성코드에 많이 사용됨.

Debugger
> OllyDBG : 전에는 많이 사용되었으나 사실상 EOS로 인해 사용하지 않게됨.
> x32, x64dbg : 많이 사용됨.

Disassembler
> IDA Pro : 많이 사용되고 실습에 사용 예정.
>> Hex-Rays : 함께 파는 플러그인, 적용시 Decompile 가능.
>> Cloud Decompiler : 클라우드에 코드 올려서 디컴파일된 출력 받음.
>>> 최근 무료로 제공됨, 소스코드가 노출되는 문제가 있음.

Hex-Rays 설정
>(IDA)"Edit -> Plugin -> Hexray Plugin -> Options -> Analysis Option 1 -> Print Only constant string literals 체크해제"

IDA 조작
> tap,F5,enter,esc,"/"
> "G" (jump to address)
> "H" : Demical <> Hexar 변환
> "R" : ASCII 변환
> "N" : Rename
> "X" : Cross-reference : 해당 변수 참조 중인 곳 링크 리스트
>> 왔던 위치로 돌아가는 것은 물론 참조 중인 다른 위치를 확인해 구조 이해 가능
> "\" : 함수 및 인자에 대한 타입을 보여주기/끄기
IDA 설명
> v는 지역변수(연한 파랑색)
> sub_는 함수(Subroutine)
> 분홍색은 API출신 함수
> dword는 전역변수(진한 파랑색)

ASLR
> 보호 기법 : 디어셈블 할 때마다 매핑되는 주소가 다름 > 아이다랑 디버거의 주소값이 매칭되지 않음.
> ASLR을 끄는 걸 적용해서 확인할 수 있음.

training1_hm.exe
> 임시경로에 자신을 복붙해놓고, 현재 파일을 삭제하는 프로그램
> 안전한 곳에 자기자신을 복사해놓고, 원본 파일을 삭제하여 은폐하는 코드
> 실제 악성코드라면 MessageBoxA() 대신 다른 작업이 있을 것임.
> hm == hide module

training2_tp.exe
> 함수 실행, 현재 실행중인 모든 프로세스의 스냅샷 획득 및 입력받은 문자열에 해당하는 프로세스 제외하고 모든 프로세스 제거
> 입력값이 없으면 실행중인 메모장 빼고 전부 제거
> tp == terminate process
> strcmp() : 두 문자열을 비교하여 같으면 "0", 다르면 음수 혹은 양수

(참고) Mitre ATT&CK Matrix : 다양한 시스템에 대한 보안 위협의 단계별 분석

training3_ar.exe
> autostart regestry

training4_ff.exe
>strrchr(FindFileData.cFileName, '.') : 특정 문자를 기준으로 문자열을 잘라 뒤의 값을 반환
>strcat(&Source, FindFileData.cFileName) : 특정 문자열(a)의 뒤에 다른 문자열(b)를 붙힘.
>recent(cmd) : 최근에 연 파일 및 디렉터리 리스트
>ff : find file

training7_sd.exe
> sd : Steel Data