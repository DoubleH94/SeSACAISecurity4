----------------------------------------------------------------------
										1일차
----------------------------------------------------------------------

실습 1. 침해사고 준비도 가이드 분석
<침해사고 준비도 가이드> 13p~19p
> 디지털 증거 및 기록은 대부분 기록 혹은 로그임.
> 공통 증거 중 활성 데이터는 시스템 종료 혹은 재부팅시 휘발되는 데이터를 의미함.

Step1. 침해사고 준비도 가이드를 읽어보고, 아래의 내용을 생성형 AI를 통해 생성해보고, 분석해보자.
1. 악성코드에 의해 시스템 침해 → 어떤 디지털 증거가 남을까? (형식, 경로, 패턴)
2. 악성코드에 의해 침해 → 어떻게 증거물을 분석할 수 있을까?


Step2. 생성형 AI 에서 프롬프팅으로 디지털 증거물(File)을 만들고 분석해보자.
1. ‘침해사고 유형별 증거 및 기록’에 대해 프롬프팅(침해사고 증거물을 분석하고 싶은데, 아래의 기록을 랜덤하게 생성하고 해당 확장자와 경로를 지정해줘. 다운로드 파일로 만들어줘.)
        Ex) 디스크 정보 확인 명령어에 대한 사용 기록(Log)
        Ex) CMOS 시간 확인 및 변경 명령어에 대한 사용 기록(Log)
    >생성형 AI로 샘플생성, 시나리오기반 자세한 샘플 생성, 분석법, 분석도구
	
Q. 쉘은 뭐고, 파워쉘은 뭐고, 쉘 스크립트는 또 뭘까요?
 - 쉘을 딴다. (쉘을 이용해서 내부 원격으로 연결, 명령어 전달, 시스템 핸들링)
 - CTF : 해킹대회 capture the flag(OS 커널, 시스템 메시지, PE 구조) - 스테가노그래피
 - 리버싱, 시스템 해킹
 - 쉘을 관리 : 내부 실행, 기록, 외부 동작 차단, 백도어 탐지 -> 관리자 권한 제거 (왜? 쉘 관리자 권한)
 - 쉘 : 크로스 플랫폼 쉘(윈도우, 리눅스, 유닉스 OS) : CMD, Wmic, powershell(많은 명령어 프로비저닝) (CLI)
> wmic : 
 - 쉘 스크립트 : 확장자 빌드(Packaging) .ps1 .bat | 네트워크 전송 할 때 확장자 탐지/차단 zip rar (압축 암호화)
  * 풀리는 암호 : 인증서 보유(Https) 보안서버 Ex) L7 로드밸런서, 웹 방화벽, 웹보안 게이트웨이
  * 안 풀리는 암호 : 압축 암호화, 오피스 암호화, DRM 암호화 (인증서 보유 X) - 악성 메일 주요한 증상
> 회사에서는 PowerShell 실행정책이 설정되어 있음 > .ps1 프로그램 실행이 막혀있음.
> VBA는 Copilot으로 대체 예정.

(사례) SGI서울보증 랜섬웨어 내용

2. 랜덤하게 생성한 증거물을 분석해보자. (Upload)
        Ex) 파이썬 분석 코드를 만듦
        Ex) Colab 에 들어가서 파일 업로드(코랩 폴더, 구글 드라이브, 직접 업로드 등) 분석
    
### [참고사항]

Samples : AD 계정 이상 행위 탐지에 활용할 수 있는 경량화된 샘플로그나 의심스러운 명령어 실행 기록을 랜덤하게 생성하고 싶어. 파일 형식, 파일 저장 경로, 정상과 비정상의 패턴 비교 특징 등을 정리해서 매핑해서 설명하고, 샘플로그는 파일 다운로드가 가능한 형태로 제시해줘. (로그는 200줄을 넘지 말고, 용량은 1MB 를 넘지 않도록 생성해줘.)
> 시트 및 csv 파일 확인
Samples : 윈도우 환경의 PC 에서 Clop 랜섬웨어의 탐지와 확산 방지를 위한 분석을 수행하고 싶어. SMB(파일 전송 및 RCE 원격 접근 등) 관련한 탐지 로그와 랜섬웨어의 사전 징후를 포착할 수 있는 샘플로그와 의심스러운 명령어 실행 기록을 랜덤하게 생성해줘. 실제 환경과 유사한 형식으로 구성해주고, 특정 상황을 가정한 예제 데이터로써 파워쉘, WMIC, Batch 스크립트 등의 명령 실행 기록을 알 수 있는 로그 패턴을 포함해줘.
> 시트 및 csv 파일 확인
Samples : Active Directory 중심으로 온프레미스와 클라우드가 연결되어 있는 하이브리드 멀티 클라우드 환경에서 AD 관리자 정보가 유출된 상황을 가정하고 관련된 해킹 행위를 탐지하고 의심스러운 명령 실행 기록을 분석하고 싶어. 관련된 경량화된 샘플로그를 생성해줘.
> 시트 및 csv 파일 확인
Samples : 금융회사의 침해사고 준비도에는 다양한 침해사고 유형별 디지털 증거물과 로그에 대해 설명하고 있어. 생성형 AI를 통해 디지털 증거물을 랜덤하게 생성하고, 분석해보고자 해. 아래의 침해 상황과 증상을 기반으로 랜덤하게 로그를 생성하고, 파일을 다운로드 받을 수 있도록 생성해서 제시해줘.
 
Samples : 악성 이메일의 첨부파일(파워쉘 기반의 파일리스 악성코드)을 수신함으로써 랜섬웨어에 감염된 PC에 대한 침해상황을 가정하고, 침해상황에 대한 분석을 진행하려고 해. 관련된 샘플 로그를 생성하고, 분석의 포인트를 지정해서 알려줘.

Samples : Active Directory 가 기업의 가장 중추신경을 담당하고 있고, 모든 자산을 중앙집중적으로 관리한다고 들었어. 그리고 보안적인 측면에서 AD 취약점이 많고, AD가 감염되는 경우 전체 기업의 자산이 위험에 처한다고 들었어. AD의 주요 개념으로는 OU, Join, 도메인, LDAP/Kerberos, MAC주소, 동기화 개념에 대해서도 요약해서 알려주면 좋겠어. 우리나라는 망분리 중심으로 네트워크가 구성되어 있는데, AD가 매우 중요한 역할을 하고 있다. 전반적으로 내용을 정리해서 제시해줘. (단, 어려운 용어는 쉽게, 초등학생도 이해할 수 있는 수준으로, 영어 축약어는 full-name 으로 병기해줘.)
> Gemini에서 관련 개념 설명 확인하기.

--------------------------------------------------------------------------------

실습2. 매크로 및 파워쉘 작성 실습(간단)

[1] 엑셀 매크로 작성
    1. 엑셀을 실행시켰을 때, 파워쉘 코드(kisia_test.ps1)가 실행되도록! (생각해보세요.)
    2. 알림창 하나 띄워주세요. ('파워쉘 코드 실행 완료되었습니다.')
    3. C:\test 폴더를 하나 생성해주세요.
    	(주의사항) 매크로는 롤백이 안됨 / 원본 파일 백업하고 실행

[2] 파워쉘 코드(kisia_test.ps1) 작성
    1. '자동으로 표준 시간대 설정'을 '끔'으로 설정하라.
    2. 아래의 내용을 포함해서 하나의 텍스트 파일로 저장하고, 지정 경로(C:\kisia_test)에 저장해주세요.
	- 시스템 활성 로그온 정보
	- 동작하고 있는 AV(안티 바이러스)가 있는지 확인하고, 있다면 종류와 버전
	- 방화벽이 동작 중인지 상태 정보
	- 프로세스 목록
    3. '화면보호기 설정'을 '없음' 으로 설정하라.
 [레지스트리 변경] - PC 재부팅의 이유 제외

Flow : 해커 이메일 -> (다운로드) 엑셀 클릭 -> 매크로 동작 -> 파워쉘 동작 -> 정해진 경로 text 생성 -> 정보 수집!

> "SGI서울보증 랜섬웨어 해킹 공격 요약 보고.txt" 및
  "PowerShell 기반 랜섬웨어의 개념적 로직.txt" 참고
>> 쉐도우 볼륨 : 특정한 시각의 파일, 폴더 또는 특정한 볼륨의 수동 또는 자동 복사본이나 스냅샷을 저장해둔 것을 말함. 복구용 데이터.
>> 킬 스위치 : 비상 정지 장치
>> 특이점 : 차등적 암호화
>> autorun.inf 랜섬웨어 취약점

ML의 한계 : 특징 설계 : 얼마나 효과적인 특징을 찾아내느냐에 달려있음.
---------------------------------------------------------------------

[내일을 위한 사전 준비]

- YARA 및 코랩 세팅

1. YARA 설치 및 세팅 : 윈도우 환경, CMD 사용 (환경 변수 설정)**
    1. 바이너리 다운로드([Releases · VirusTotal/yara](https://github.com/virustotal/yara/releases/))
    2. 전역명령어 - 환경변수 설정(C:\Program Files\yara) sysdm.cpl
    3. CMD / Python : 설치 확인
    4. 필요한 라이브러리 업데이트, pip 업그레이드 : 호환성, 에러
    5. Yara64.exe —help

2. Colab - PE Installer / PEfile 라이브러리 활용
 - .ipynb 파일 공유
 - PE 구조 더미 파일 생성 / Yara 탐지 룰셋 생성 완료


----------------------------------------------------------------------
										2일차
----------------------------------------------------------------------
전체적인 의도된 흐름[Malware 생성 및 탐지]
Step1. 생성
- 엑셀(.xlsm)
- 파워쉘(.ps1)
- PE(.exe)
- 배치(.bat)

Step2. 탐지
- yara(CLI)
- 해킹진단도구(제공된 App)

Step3. 프로젝트
- 종합해서 보고서 작성
----------------------------------------------------------------------
실습3. GPO 관련 이벤트 모니터링 프롬프트
GPO : AD 도메인 전역의 사용자 및 컴퓨터를 관리하도록 하는 정책 집합
로컬보안정책(SECPOL)
> .bat 파일로 만들어보기
Samples1. 개체 관리 감사 이벤트 뷰어정보에서 이벤트 4739가 모니터링에 탐지되면 알림을 줄 수 있는 방법을 안내해줘. 이벤트 뷰어와 파워쉘 기반으로 설명이 되면 좋을 것 같아. 알림은 메시지 박스를 띄워주는 방법으로.
Samples2. GPO를 활용해서 전체 1000대의 PC의 로컬 정책에서 감사로그를 성공, 실패 모두 enabled 해서 기록하는 파워쉘 코드를 작성하고 싶어. 여기에 활용할 수 있는 파워쉘 코드를 작성해줘.
Samples3. ACtive Directory를 활용해서 GPO 정책으로 컴퓨터가 켜지고, CMD가 실행되다가 CMD 꺼질 때 모든 명령어 사용기록을 자동으로 남기도록(특정 폴더에 해당 기록이 TEXT 파일로 저장이 되도록, 구분이 가능하도록 날짜가 네이밍에 들어가면 좋을 것 같아.) doskey /hostory 를 자동으로 실행되도록 설정하고 싶어. 여기에 사용되는 GPO 정책은 무엇이 있을까?



----------------------------------------------------------------------

실습4. PE 파일 생성 및 YARA 탐지 룰

중요한 부분은 생성형 AI 를 사용해보라. (코랩으로 파이썬 PE 파일 peinstaller 빌드 가능)

ChatGPT < Claude < Gemini(트러블 슈팅) 오류 수정

**#제출 :  PE(.exe)파일과 YARA(.yar)파일을 .zip으로 묶어서 업로드 해주세요.**

## Step1. PE 기본 구조 파일 생성 및 YARA 기본 패턴 생성

1. **YARA 설치 및 세팅 : 윈도우 환경, CMD 사용 (환경 변수 설정)**
    1. 바이너리 다운로드([Releases · VirusTotal/yara](https://github.com/virustotal/yara/releases/))
    2. 전역명령어 - 환경변수 설정(C:\Program Files\yara) sysdm.cpl
    3. CMD / Python : 설치 확인
    4. 필요한 라이브러리 업데이트, pip 업그레이드 : 호환성, 에러
    5. Yara64.exe —help
	
	> yara64 --version
	
2. **PE 파일 생성 : 기본적인 PE 파일 구조 (실행 가능한 부분은 포함하지 않아도 되며, 아래의 내용을 반영해서 생성해야 함)**
    1. Detect_Custom_PE_File : 섹션의 이름($text_section = ".text”)
    2. Detect_Custom_PE_Structure : 3개의 섹션을 가진 PE 파일 ($num_sections = { 03 00 })
    3. Detect_Custom_PE_Empty_Sections : 파일 크기가 5kb 보다 작아야 함(filesize < 5KB)
3. **PE 파일을 Detection 할 수 있는 특징을 아래와 같이 설정한 YARA 탐지 규칙을 작성하고, .yar 파일로 저장 (저장 후, 해당 파일로 PE 파일을 대상으로 진단 수행)**
    1. Detect_Custom_PE_File : 섹션의 이름($text_section = ".text”)
    2. Detect_Custom_PE_Structure : 3개의 섹션을 가진 PE 파일 ($num_sections = { 03 00 })
    3. Detect_Custom_PE_Empty_Sections : 파일 크기가 5kb 보다 작아야 함(filesize < 5KB)

############################################################################ Step2. PE 구조의 악성코드의 특징 반영 및 YARA 패턴 최적화

1. **아래의 특징을 반영한 악성코드(PE파일_new)을 반영한 새로운 PE 파일 생성(기존 코드 업로드 → 오픈 → 코드 수정 → Re-Build)**
    1. 의심스러운 API 사용(CreateRemoteThread, VirtualAlloc)
    2. 난독화된 문자열 패턴 포함(아래의 문자열을 Base64로 인코딩)
        
```python
"http://malicious.example.com/payload",
"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
"cmd.exe /c powershell -enc {}"
```
>> 난독화된 문자열 백업
ICAgICAgICBgYGBweXRob24NCiAgICAgICAgImh0dHA6Ly9tYWxpY2lvdXMuZXhhbXBsZS5jb20vcGF5bG9hZCIsDQogICAgICAgICJIS0VZX0xPQ0FMX01BQ0hJTkVcXFNvZnR3YXJlXFxNaWNyb3NvZnRcXFdpbmRvd3NcXEN1cnJlbnRWZXJzaW9uXFxSdW4iLA0KICAgICAgICAiY21kLmV4ZSAvYyBwb3dlcnNoZWxsIC1lbmMge30iDQogICAgICAgIGBgYA==
	
2. **새로운 악성코드 특징이 반영된 새로운 PE 파일을 Detection 할 수 있도록 YARA 탐지 규칙을 최적화하고, a_new.yar 파일로 저장 (저장 후, 해당 파일로 PE 파일을 대상으로 진단 수행)**
    1. 의심스러운 API 사용(CreateRemoteThread, VirtualAlloc)
    2. 난독화된 문자열 패턴 포함(아래의 문자열을 Base64로 인코딩) - 엔트로피 포인트
        
        ```python
        "http://malicious.example.com/payload",
        "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
        "cmd.exe /c powershell -enc {}"
        ```
        
    3. 실행 압축된 코드 섹션 추가(XOR로 인코딩된 가짜 쉘코드 포함) - 코드 난독화
    4. Anti-VM 체크 코드 섹션 추가(가상 머신 탐지를 위한 Dummy 어셈블리 코드 포함) - 악성코드 분석 방해

###
Samples. 악성코드 생성 및 탐지에 대한 실습을 진행 중이야 
위에 제공된 .ipynb 파일의 실행결과로 생성되는 "custom_test_pe.exe"에 아래의 특징을 반영한 새로운 PE 파일 "custom_test_pe_new.exe", 그리고 이 새로운 PE 파일을 Detection 할 수 있도록 YARA 탐지 규칙을 최적화하고, "custom_test_new.yar" 파일로 저장를 만들고 싶어.
 1. 의심스러운 API 사용(CreateRemoteThread, VirtualAlloc)
 2. 난독화된 문자열 패턴 포함(아래의 문자열을 Base64로 인코딩) - 엔트로피 포인트 > 난독화는 내가 직접 했어
  Base64로 난독화된 문자열 :
  ICAgICAgICBgYGBweXRob24NCiAgICAgICAgImh0dHA6Ly9tYWxpY2lvdXMuZXhhbXBsZS5jb20vcGF5bG9hZCIsDQogICAgICAgICJIS0VZX0xPQ0FMX01BQ0hJTkVcXFNvZnR3YXJlXFxNaWNyb3NvZnRcXFdpbmRvd3NcXEN1cnJlbnRWZXJzaW9uXFxSdW4iLA0KICAgICAgICAiY21kLmV4ZSAvYyBwb3dlcnNoZWxsIC1lbmMge30iDQogICAgICAgIGBgYA==
 3. 실행 압축된 코드 섹션 추가(XOR로 인코딩된 가짜 쉘코드 포함) - 코드 난독화
 4. Anti-VM 체크 코드 섹션 추가(가상 머신 탐지를 위한 Dummy 어셈블리 코드 포함) - 악성코드 분석 방해
 
제공된 파일과 마찬가지로 Colab에서 실행할 수 있게 python으로 작성되어야 해
###	

-----------------------------------------------------------------------------
[중간 실습] 실습 4.2. 배치 파일 활용해보기!
 - .bat(배치 파일)
 - 스크립트로써 CMD 나 파워쉘에서 주로 활용!
 - 패치, 배포, 업데이트, 설정변경, 진단 시 주로 활용
> ex) 배치(.bat)파일을 하나 만들거야. 배치 파일을 클릭하면 scr 파일을 하나 가상으로 생성하고, scr 파일에 runas 를 적용해서 CMD를 띄우는 동작을 수행하고 싶어. 배치 파일 코드를 제시해줘.
-
-
-
-
-
-

대응방안 (보고서에 포함해봐라)
-
-
-
-
-
> 안전하지 않은 앱 : 코드 사이닝이 없거나 확인이 불가능한 파일


-----------------------------------------------------------------------------

실습 5. 해킹진단도구 활용 및 회귀분석 실행

### (KISA) 해킹 진단 도구 사용 및 활용

[해킹진단도구.zip](attachment:8717f6e8-5579-49be-b308-5e7ff474b95a:해킹진단도구.zip)

1. 해킹진단도구 - 매뉴얼 읽어보고 사용해보기(샘플 악성코드)
2. 해킹진단도구 - Private Rules 작성해보기
3. 해킹진단도구 - Yara Rules 대응방안
- (번외) 악성코드가 주로 조작하는 레지스트리 경로 확인해보기

### 구글 코랩 환경에서 이상탐지 모델 작성 및 학습 데이터 생성(훈련)

[방법1] 다중 선형 회귀를 활용해서 악성코드를 분석하고 싶어. CPU 사용량을 기준으로 독립변수로 활용하고, 이에 대한 종속변수는 악성코드 감염이야. CPU 사용량을 기준으로 하는 학습 데이터를 1,000건 생성하고, 분석에 활용할 수 있는 다중 선형 회귀 모델을 만들어줘.

회귀 분석을 활용한 악성 코드 분석(다중 선형 회귀)
- 독립변수 : CPU 사용량, 네트워크 트래픽, 파일 생성 횟수, API 호출 카운트
- 종속변수 : 악성코드 감염
- 착안사항 : 임계치 설정, CPU 사용량 등 외에도 어떤 특징(Featrue)가 영향을 줄 지 다양한 독립변수에 대해서 고려해보세요.
"CPU 사용량~"

>> Malware_example(Multiple Linear Regression).ipynb 


[방법2] K-Means 클러스터링을 활용해서 악성코드의 유형을 분류할 거야. 악성코드 정상, 랜섬웨어, 웜, 트로이 목마로 구분하고 각 악성코드는 0~3 코드로 분류해줘. 각각 데이터 셋은 1,000으로 랜덤하게 생성해줘. 모델을 제작하기 위한 악성코드 유형 분류 알고리즘을 제작해서 제시해줘.

클러스터링 분석을 활용한 악성코드 유형 분류(K-means 클러스터링)

- 정상(0)
- 랜섬웨어(1)
- 웜(2)
- 트로이목마(3)
- 착안사항 : 품종을 분류하듯이 악성코드를 분류할 때 사용되는 특징(Feature)가 무엇이 있는지 한 번 고려해보세요.
"K-Means 클러스터링을 활용해서 악성코드의 유형을 분류할 거야. 악성코드 정상, 랜섬웨어, 웜, 트로이 목마로 구분하고 각 악성코드는 0~3 코드로 분류해줘.

분류에 필요한 Feature를 어떤 것으로 잡는 게 좋을까 ?
예시 몇 가지 들어줘
"

>> Malware_Practice(K-means).ipynb


[방법3] LSTM-AE 모델을 활용해서 정상과 비정상을 구분하는 이상징후 탐지 모델을 만들고 싶어. 정상, 비정상 학습 데이터를 각각 1,000건으로 생성해줘. 모델을 제작할 수 있는 코드를 제시해줘. D3.js 라이브러리를 활용해서 해당 정상과 비정상을 구분하는 데 알맞은 시각화 라이브러리를 선정하고 3가지 버전으로 코드를 구현해줘.

Anomaly detection(LSTM-AE) 을 활용한 악성코드 탐지

- 정상 데이터 학습
- 비정상 활동 탐지
- 착안사항 : 정상과 비정상을 구분하는 특징(Feature)는 어떤 것이 설정되어 있는지 확인해보세요.

"LSTM-AE 모델을 활용해서 정상과 비정상을 구분하는 이상징후 탐지 모델을 만들고 싶어. 
"

>> 진행 예정


---------------------------------[최종 조별 실습 주제]--------------------------------

실습 5. 악성코드 모의훈련 구성해보기.

[악성코드 모의훈련 시나리오]

1. 해커는 직원의 이메일로 엑셀 파일(악성 매크로가 포함된)이 암호화 압축된 파일을 첨부파일로 송신합니다. (이메일 본문에 비밀번호 적혀있음)

2. 직원은 이메일을 열어보고, 첨부된 파일을 다운로드해서 비밀번호를 입력 후 압축해제 된 엑셀파일(.xlsm)을 아무런 의심 없이 열어봅니다.

3. 엑셀 파일 실행 시, 매크로(VBA 모듈)가 동작합니다. (직원의 매크로 보안 설정이 해제되어 있다고 가정합니다.) VBA 코드에는 다음과 같은 악성 행위가 포함됩니다. (workbook_Open 을 이용하여 A 이벤트 실행 후, B 이벤트 실행되도록 작성)
     
    1. A 이벤트 : 현재 엑셀 파일을 관리자 권한으로 다시 실행(현재 엑셀 꺼짐)
    2. B 이벤트(관리자 권한) - UAC 해제(레지스트리 변경) (사전에 윈도우 UAC 관련 보안 설정을 꺼야 할 수 있음)
    3. B 이벤트(관리자 권한) - 특정 폴더에 위치한 test.exe 파일 실행				| (.exe 파일은 사전에 생성)
    
4. PC에 exe 파일이 다운로드 되어 실행 시 아래의 조건을 수행합니다.
    
    1. 5개의 레지스트리 생성 및 변조
    2. 2개의 파워쉘 스크립트 실행											| (.ps1 파일은 사전에 생성)
    3. 5개의 정보수집하는 cmd.exe 사용하여 실행 후 결과값 텍스트(.txt)로 저장	| (.bat 파일은 사전에 생성)
    4. YARA(.yar) 를 기반으로 CMD 에서 EXE 파일에 대해 Detect 를 직접 수행



5. 탐지 프로그램을 제작하고, 악성코드를 탐지 및 분석합니다.
  
    1. 아래의 내용을 포함하고 있는 ‘악성코드 생성, 실행, 탐지 결과보고서’(자유양식)를 작성합니다.
    - 내용 : 악성코드 분석 정보 및 대응 방안 등
    - 파일 정보 : 파일명, 크기, 해시 정보(MD5, SHA-1, SHA-256)
    - 정적 분석 결과(Yara)
    - 악성 행위 요약 : 계정 및 패스워드 수집, 백도어 등 실행된 악성 행위 기술
    - 탐지 및 대응 방안(기업 차원에서의 재발방지대책) : 직접 작성
    -> 제출파일 형식 : 워드 파일(.docx)
    -> 산출물(.xlsm .exe .ps1 .bat 파일 생성파일 / YARA 탐지룰, 보고서)
    
[마무리] 복원지점 지정해놓고 복원지점으로 Recovery!

감사합니다!


vba 작성
	1. GPT
	2. GPT
	3. 테스트 PE파일로 대체(그냥 메세지 박스 하나 띄우는거)
	기타. 엑셀 켰을 때 vba 실행 설정 등
	
exe 작성
	1. 
	2.
	3.
	
yara 작성

결과보고서 작성

